
import yfinance as yf
import pandas as pd
import argparse 
import asyncio
from agents import FundamentalAgent, ProfitabilityAgent, LiquidityAgent, SupervisorAgent
from pipelines import AgentWorkflow
from data import StockDataClient
from data.fin_data_defs import FinancialRatios
from tools import get_ticker
from art import text2art


"""This script performs a financial analysis workflow using LLaMA-3 (llama3:8b) agents.
    It fetches stock data for a given ticker symbol, performs various analyses, and generates plots.
    It requires the user to specify the ticker symbol and country (US or IN) as command-line arguments.
    It also saves the results and plots to a specified output directory.
"""
from tools.plots import TickerPlotter 
from tools.archive import ArchiveManager

    
async def main(args):
    # Initialize data interface and archiver
    data_interface = StockDataClient(args.data_provider)  
    archiver = ArchiveManager(args)
    plotter = TickerPlotter(args,archiver)
    # Define agents
    agents = {
        "FundamentalAgent": FundamentalAgent(data_interface),
        "ProfitabilityAgent": ProfitabilityAgent(data_interface, model_name=args.llama_model),
        "LiquidityAgent": LiquidityAgent(data_interface, model_name=args.llama_model),
        "SupervisorAgent": SupervisorAgent(data_interface,model_name=args.llama_model)
    }
   
    # Initialize workflow
    workflow = AgentWorkflow(agents, "FundamentalAgent", archiver)
    
    # Run analysis for a ticker
    ticker = get_ticker(args)
    
    print(f'Starting analysis ...')
    info_df = data_interface.get_company_data(ticker)
    if info_df.empty:
        print(f"No data found for ticker {ticker}. Please check the ticker symbol and try again.")
        return   
    archiver.save_df(info_df, "company_info")
    print(f"Information saved to {args.output_dir}/{ticker}")
   
    plotter.plot_all()
    
    """
    Run the workflow with the specified ticker symbol.
    This will execute the agents in sequence, each performing its analysis and passing results to the next agent.
    The final assessment will be generated by the SupervisorAgent.
    """

    overall_comment = await workflow.run(ticker)
       
    
    print(f"\nFinal Assessment: {overall_comment}")

    
    archiver.save_commentary(overall_comment)



def parse_arguments() -> str:
    parser = argparse.ArgumentParser(description="Financial Analysis Workflow using LLaMA-3 (llama3:8b)")
    parser.add_argument('--symbol', type=str, required=True, help='Ticker symbol of the company to analyze')
    parser.add_argument('--country', type=str, required=True, choices=['US', 'IN'], help='Country of the company (US/IN)')
    parser.add_argument('--output_dir', type=str, required=True, default='.', help='Output directory to store assets such as plots')
    parser.add_argument('--data_provider', type=str, choices=['yfinance', 'fmp'], default='yfinance', help='Data provider to use for fetching stock data (default: yfinance)')
    parser.add_argument('--llama_model', type=str, default='llama3:8b', choices=['llama3:7b', 'llama3:8b', 'llama3:13b', 'llama3:30b'], help='LLaMA model to use for analysis (default: llama3:8b)')
    args = parser.parse_args()
    return args

if __name__ == "__main__":
    logo = text2art("FINAGENT by Ankur", font="small")
    print("\n" + logo + "\n") 
    print(f'Your AI powered stock analysis tool')
    args = parse_arguments()
    print(f"Input : {args.symbol}")
    asyncio.run(main(args))